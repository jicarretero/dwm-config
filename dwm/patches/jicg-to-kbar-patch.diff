diff --git a/colors/catppuccin.h b/colors/catppuccin.h
index 4f50fb1..f123ee7 100644
--- a/colors/catppuccin.h
+++ b/colors/catppuccin.h
@@ -1,11 +1,12 @@
-static const char col_gray1[]       = "#1a1826";
-static const char col_gray2[]       = "#45475a";
-static const char col_gray3[]       = "#585b70";
-static const char col_gray4[]       = "#45475a";
-static const char selbordercolor[]  = "#a6e3a1";
-static const char col_cyan[]        = "#f5c2e7";
-static const char *colors[][3]      = {
-	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray1 },
-	[SchemeSel]  = { col_gray4, col_cyan,  selbordercolor  },
+static const char col_gray1[] = "#1a1826";
+static const char col_gray2[] = "#45475a";
+static const char col_gray3[] = "#585b70";
+static const char col_gray4[] = "#45475a";
+static const char selbordercolor[] = "#a6e3a1";
+static const char col_cyan[] = "#f5c2e7";
+
+static const char *colors[][3] = {
+    /*               fg         bg         border   */
+    [SchemeNorm] = {col_gray3, col_gray1, col_gray1},
+    [SchemeSel] = {col_gray4, col_cyan, selbordercolor},
 };
diff --git a/config.def.h b/config.def.h
index 2d6c471..9a6d875 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,5 +1,5 @@
 /* See LICENSE file for copyright and license details. */
-#include "colors/krtcolors.h"
+#include "colors/kdracula.h"
 
 /* appearance */
 static const unsigned int borderpx  = 2;        /* border pixel of windows */
@@ -12,11 +12,12 @@ static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display
 static const int showsystray        = 1;        /* 0 means no systray */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10", "Ubuntu Nerd Font:size=10" };
+static const char *fonts[]          = { "monospace:size=10", "Ubuntu Nerd Font:size=12" };
 static const char dmenufont[]       = "monospace:size=10";
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+/* static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" }; */
+static const char *tags[] = {"1: ", "2:  ", "3:  ", "4:  ", "5:  ", "6:  ", "7:  ", "8:  ", "9:  ", "0:  "};
 
 static const Rule rules[] = {
 	/* xprop(1):
@@ -25,6 +26,7 @@ static const Rule rules[] = {
 	 */
 	/* class      instance    title       tags mask     isfloating   monitor    scratch key */
 	{ "Gimp",     NULL,       NULL,       0,            1,           -1,        0  },
+	{ "Archlinux-logout.py",     NULL,       NULL,       0,            1,           -1,        0  },
 	{ "firefox",  NULL,       NULL,       1 << 8,       0,           -1,        0  },
 	{ NULL,       NULL,   "scratchpad",   0,            1,           -1,       's' }, 
 	{ NULL,       NULL,   "rangerthing",   0,            1,           -1,      'r' }, 
@@ -60,6 +62,8 @@ static const Layout layouts[] = {
 
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
+/* #define STATUSBAR "dwmblocks" */
+#define STATUSBAR "krtbar"
 
 /* commands */
 static const char *dmenucmd[] = { "dmenu_run", "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
@@ -123,6 +127,7 @@ static const Key keys[] = {
 	TAGKEYS(                        XK_7,                      6)
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
+	TAGKEYS(                        XK_0,                      9)
 	{ MODKEY,                       XK_F12,  togglescratch,  {.v = scratchpadcmd } },
 	{ MODKEY,                       XK_F7,  togglescratch,  {.v = scratchpadcmuscmd } },
 	{ MODKEY,                       XK_F3,  togglescratch,  {.v = scratchpadrangercmd } },
@@ -136,7 +141,9 @@ static const Button buttons[] = {
 	/* click                event mask      button          function        argument */
 	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
 	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
-	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkStatusText,        0,              Button1, 	sigstatusbar,   {.i = 0} },
+	{ ClkStatusText, 	0, 		Button2, 	sigstatusbar,   {.i = 1} },
+	{ ClkStatusText,	0, 		Button3, 	sigstatusbar,   {.i = 2} },
 	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
 	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
 	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
diff --git a/dwm.c b/dwm.c
index a75c497..0f507fb 100644
--- a/dwm.c
+++ b/dwm.c
@@ -80,7 +80,7 @@ enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
 enum { Manager, Xembed, XembedInfo, XLast }; /* Xembed atoms */
 enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkClientWin,
-       ClkRootWin, ClkLast }; /* clicks */
+       ClkRootWin, ClkLast, ClkWinTitle }; /* clicks */
 
 typedef union {
 	int i;
@@ -244,6 +244,8 @@ static void showhide(Client *c);
 static void sigchld(int unused);
 static void sighup(int unused);
 static void sigterm(int unused);
+static pid_t getstatusbarpid();
+static void sigstatusbar(const Arg *arg);
 static void spawn(const Arg *arg);
 static void spawnscratch(const Arg *arg);
 static Monitor *systraytomon(Monitor *m);
@@ -316,6 +318,12 @@ static Display *dpy;
 static Drw *drw;
 static Monitor *mons, *selmon;
 static Window root, wmcheckwin;
+static int statussig = 1;
+static int statusw;
+static pid_t statuspid = -1;
+static int clkd_at = 0;
+static int blk = 0;
+
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -485,6 +493,51 @@ attachstack(Client *c)
 	c->mon->stack = c;
 }
 
+int getblock() {
+	char buffer[4096] = {0};
+	char cr = (char) 31;
+
+	char *s = stext;
+
+	int i = 0;
+	/* Buffer without colors ... */
+	while ( *s && i<4096 ) {
+	       	if ( *s == '^' && ( *(s+1) == 'c' || *(s+1) == 'b' )  && *(s+2) == '#' ) {
+			s+=3;
+			while (*s && *s++ != '^');
+			continue;
+		}
+		buffer[i++]=*s++;
+	}
+
+
+	char *text = buffer; 
+	s = buffer;
+	int x = 0;
+	int b = 0;
+	i=0;
+
+	while ( *s && x < clkd_at) {
+		if ( *s == cr ) {
+			b++;
+			s++; i++;
+			while ( *s && *s != cr ) { 
+				s++; 
+				i++;
+			}
+			char ch = *s;
+			*s = '\0';
+			x = TEXTW(buffer);
+			*s = ch;
+			if (x>clkd_at)
+			       break;	
+		} else {
+			s++; i++;
+		}
+	}
+	return b;
+}
+
 void
 buttonpress(XEvent *e)
 {
@@ -515,13 +568,16 @@ buttonpress(XEvent *e)
 		if (i < LENGTH(tags)) {
 			click = ClkTagBar;
 			arg.ui = 1 << i;
-		} else if (ev->x < x + TEXTW(selmon->ltsymbol))
+		} else if (ev->x < x + TEXTW(selmon->ltsymbol)) {
 			click = ClkLtSymbol;
-		// else if (ev->x > selmon->ww - (int)TEXTW(stext) - getsystraywidth())
-		//	click = ClkStatusText;
-		else
-		//	click = ClkWinTitle; 
-			click = ClkStatusText;  //nl patch no title
+		} else if (ev->x > selmon->ww - statusw - getsystraywidth()) {
+			char *text, *s, ch;
+			click = ClkStatusText;
+			clkd_at = ev->x - selmon->ww + statusw + getsystraywidth();
+			blk = getblock();
+		} else {
+			click = ClkWinTitle;
+		}
 	} else if ((c = wintoclient(ev->window))) {
 		focus(c);
 		restack(selmon);
@@ -992,7 +1048,7 @@ drawbar(Monitor *m)
 
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
-		tw = m->ww - drawstatusbar(m, bh, stext);
+		tw = statusw = m->ww - drawstatusbar(m, bh, stext);
 	}
 
 	resizebarwin(m);
@@ -1016,15 +1072,8 @@ drawbar(Monitor *m)
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 
 	if ((w = m->ww - tw - stw - x) > bh) {
-		//if (m->sel) {
-		//	drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
-		//	drw_text(drw, x, 0, w, bh, lrpad / 2, m->sel->name, 0);
-		//	if (m->sel->isfloating)
-		//		drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
-		//} else {
 			drw_setscheme(drw, scheme[SchemeNorm]);
 			drw_rect(drw, x, 0, w, bh, 1, 1);
-		//}
 	}
 	drw_map(drw, m->barwin, 0, 0, m->ww - stw, bh);
 }
@@ -2060,6 +2109,47 @@ sigterm(int unused)
 	Arg a = {.i = 0};
 	quit(&a);
 }
+/* jicg */
+pid_t getstatusbarpid() {
+	char buf[32], *str = buf, *c;
+	FILE *fp = NULL;
+	
+	if (statuspid > 0) {
+		snprintf(buf, sizeof(buf), "/proc/%u/cmdline", statuspid);
+		if ((fp = fopen(buf, "r"))) {
+			fgets(buf, sizeof(buf), fp);
+			while ((c = strchr(str, '/')))
+				str = c + 1;
+			fclose(fp);
+			if (!strcmp(str, STATUSBAR))
+				return statuspid;
+		}
+	}
+	if (!(fp = popen("pidof -s " STATUSBAR, "r"))) {
+		return -1;
+	}
+       
+	fgets(buf, sizeof(buf), fp);
+	if (str == NULL) {
+		return -1;
+	}
+	pclose(fp);
+	return strtoul(buf, NULL, 10);
+}
+
+void sigstatusbar(const Arg *arg) {
+	union sigval sv;
+
+	if (!statussig)
+		return;
+	sv.sival_int = arg->i;
+	if ((statuspid = getstatusbarpid()) <= 0)
+		return;
+	
+	sv.sival_int = blk;
+	sigqueue(statuspid, SIGRTMIN + arg->i, sv);
+}
+/* end jicg*/ 
 
 void
 spawn(const Arg *arg)
